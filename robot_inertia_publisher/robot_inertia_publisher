#!/usr/bin/env python

import roslib; roslib.load_manifest('urdfdom_py')
import rospy

from urdf_parser_py.urdf import URDF
from geometry_msgs.msg import Inertia
from visualization_msgs.msg import Marker, MarkerArray
from robot_inertia_publisher.msg import InertiaWithLinkArray

import PyKDL
import numpy


def dyn_properties_publisher():
    rospy.init_node('robot_inertia_publisher', anonymous=True)
    
    robot_description_param = rospy.get_param('~robot_description', 'robot_description')
    tf_prefix = rospy.get_param('~tf_prefix', '')
    if tf_prefix != '':
        tf_prefix = tf_prefix + '/' 
    
    robot = URDF.from_parameter_server(robot_description_param)

    print('Start publish inertia info')

    # Inertia is published once latched
    inertias = InertiaWithLinkArray()
    for link in robot.links:
        if link.inertial != None:
            i = Inertia()
            if link.inertial.origin:
                i.com.x = link.inertial.origin.position[0]
                i.com.y = link.inertial.origin.position[1]
                i.com.z = link.inertial.origin.position[2]
            else:
                i.com.x = 0.
                i.com.y = 0.
                i.com.z = 0.
            i.m = link.inertial.mass
            i.ixx = link.inertial.inertia.ixx
            i.ixy = link.inertial.inertia.ixy
            i.ixz = link.inertial.inertia.ixz
            i.iyy = link.inertial.inertia.iyy
            i.iyz = link.inertial.inertia.iyz
            i.izz = link.inertial.inertia.izz
            
            inertias.inertias.append(i)
            inertias.links.append(link.name)
    
    pubi = rospy.Publisher("link_inertias", InertiaWithLinkArray, queue_size=1, latch = True)
    pubi.publish(inertias)
                
    
    #Marker Array is published @10Hz
    rate = rospy.Rate(10) # 10hz
    while not rospy.is_shutdown():
        
        t = rospy.Time.now()        
        
        marker_array = MarkerArray()
        
        _id = 0
        for link in robot.links:
            if link.inertial != None:
                
                
                #cog
                markerp = Marker()
                if link.inertial.origin:
                    markerp.pose.position.x = link.inertial.origin.position[0]
                    markerp.pose.position.y = link.inertial.origin.position[1]
                    markerp.pose.position.z = link.inertial.origin.position[2]
                else:
                    markerp.pose.position.x = 0.
                    markerp.pose.position.y = 0.
                    markerp.pose.position.z = 0.
                markerp.pose.orientation.x = 0
                markerp.pose.orientation.y = 0
                markerp.pose.orientation.z = 0
                markerp.pose.orientation.w = 1
                scale = link.inertial.mass/200.
                if scale < 0.01:
                    scale = 0.01
                markerp.scale.x = scale
                markerp.scale.y = scale
                markerp.scale.z = scale
                
                markerp.color.r = 0.
                markerp.color.g = 0.
                markerp.color.b = 1.
                markerp.color.a = 0.5
                
                markerp.type = markerp.SPHERE
                
                markerp.header.frame_id = tf_prefix + link.name
                markerp.header.stamp = t
                markerp.text = link.name + "_cog"
                
                markerp.id = _id
                _id = _id + 1
                
                
                #inertia
                markeri = Marker()
                inertia = numpy.matrix([[link.inertial.inertia.ixx, link.inertial.inertia.ixy, link.inertial.inertia.ixz], 
                                     [link.inertial.inertia.ixy, link.inertial.inertia.iyy, link.inertial.inertia.iyz], 
                                     [link.inertial.inertia.ixz, link.inertial.inertia.iyz, link.inertial.inertia.izz]])
                
                (eigValues,eigVectors) = numpy.linalg.eig (inertia)

                eigx_n=-PyKDL.Vector(eigVectors[0,0],eigVectors[1,0],eigVectors[2,0])
                eigy_n=-PyKDL.Vector(eigVectors[0,1],eigVectors[1,1],eigVectors[2,1])
                eigz_n=-PyKDL.Vector(eigVectors[0,2],eigVectors[1,2],eigVectors[2,2])
                
                rot = PyKDL.Rotation (eigx_n,eigy_n,eigz_n)
                quat = rot.GetQuaternion ()
 
                if link.inertial.origin:
                    markeri.pose.position.x = link.inertial.origin.position[0]
                    markeri.pose.position.y = link.inertial.origin.position[1]
                    markeri.pose.position.z = link.inertial.origin.position[2]
                else:
                    markeri.pose.position.x = 0.
                    markeri.pose.position.y = 0.
                    markeri.pose.position.z = 0.
                markeri.pose.orientation.x = quat[0]
                markeri.pose.orientation.y = quat[1]
                markeri.pose.orientation.z = quat[2]
                markeri.pose.orientation.w = quat[3]
                
                alpha = 2.*link.inertial.mass/5.

                markeri.scale.x = 2.*numpy.sqrt(numpy.absolute(eigValues[1]+eigValues[2]-eigValues[0])/alpha)
                markeri.scale.y = 2.*numpy.sqrt(numpy.absolute(eigValues[2]+eigValues[0]-eigValues[1])/alpha)
                markeri.scale.z = 2.*numpy.sqrt(numpy.absolute(eigValues[0]+eigValues[1]-eigValues[2])/alpha)

                #print "======= Link %s ========" % link.name
                #print "mass = %s" % link.inertial.mass
                #print "alpha = %s" % alpha
                #print "eigValue[0] = %s" % eigValues[0]
                #print "eigValue[1] = %s" % eigValues[1]
                #print "eigValue[2] = %s" % eigValues[2]

                #print "markeri.scale.x = %s" % markeri.scale.x
                #print "markeri.scale.y = %s" % markeri.scale.y
                #print "markeri.scale.z = %s" % markeri.scale.z

                markeri.color.r = 1.
                markeri.color.g = 0.
                markeri.color.b = 0.
                markeri.color.a = 0.5
                
                markeri.type = markeri.SPHERE
                
                markeri.header.frame_id = tf_prefix + link.name
                markeri.header.stamp = t
                markeri.text = link.name + "_inertia"
                
                markeri.id = _id
                _id = _id + 1
                
                markerp.ns = link.name + "_com"
                markeri.ns = link.name + "_inertia"

                marker_array.markers.append(markerp)
                marker_array.markers.append(markeri)
                
                
        pubm = rospy.Publisher("link_inertias_viz", MarkerArray, queue_size=1)
        pubm.publish(marker_array) 
        
        rate.sleep()

if __name__ == '__main__':
    try:
        dyn_properties_publisher()
    except rospy.ROSInterruptException:
        pass

